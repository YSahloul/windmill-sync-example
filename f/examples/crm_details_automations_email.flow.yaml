summary: Automatically Populate CRM Contact Details from Simple Email
description: >-
  Populate your CRM contacts' details from only emails. Note: this Workflow
  works with a table that has specific columns names, customize them to your
  needs.

  Tutorial: https://www.windmill.dev/blog/automatically-populate-crm
value:
  failure_module:
    value:
      content: >-
        import * as wmill from "https://deno.land/x/windmill@v1.70.1/mod.ts";

        import { Airtable } from "https://deno.land/x/airtable/mod.ts";


        export async function main(at_con: wmill.Resource<"airtable">, at_table:
        wmill.Resource<"airtable_table">, first_name: string = "n/a", last_name:
        string = "n/a", email: string, company: string = "n/a", role: string =
        "n/a", what_company_does: string = "n/a", automatic: boolean = true) {

            const airtable = new Airtable({...at_con, ...at_table});
            
            const new_record = {
                "First name": first_name,
                "Last name": last_name,
                "Email": email,
                "Company": company,
                "Role": role,
                "What company does": what_company_does,
                "Generated automatically": automatic
            };

            const createOne = await airtable.create(new_record);

            return { message: "Created record in table"}
        }
      input_transforms:
        at_con:
          expr: 'flow_input["Airtable Account"]'
          type: javascript
        at_table:
          expr: 'flow_input["Airtable Table"]'
          type: javascript
        automatic:
          value: true
          type: static
        company:
          value: n/a
          type: static
        email:
          expr: flow_input.email
          type: javascript
        first_name:
          value: n/a
          type: static
        last_name:
          value: n/a
          type: static
        role:
          value: n/a
          type: static
        what_company_does:
          value: n/a
          type: static
      language: deno
      type: rawscript
    id: failure
    input_transforms: {}
  modules:
    - summary: Parses email
      value:
        content: |-
          export async function main(email: string) {
            let [name, domain] = email.split("@");
            let name_space = name.charAt(0) + " " + name.slice(1);
            name = name.replace(/[0-9]/g, " ");
            name_space = name_space.replace(/[0-9]/g, " ");
            const nameWithoutDots = name.replace(/\./g, " ");
            const commonDomains = [
              "gmail.com",
              "yahoo.com",
              "outlook.com",
              "hotmail.com",
              "aol.com",
              "icloud.com",
              "mail.ru",
              "yandex.ru",
              "live.com",
              "zoho.com",
              "protonmail.com",
              "gmx.com",
              "fastmail.com",
              "comcast.net",
              "verizon.net",
              "163.com",
              "qq.com",
              "sina.com",
              "naver.com",
              "t-online.de",
            ];

            const isCommonDomain = commonDomains.includes(domain);

            if (isCommonDomain) {
              return { name_space, name: nameWithoutDots, domain: "" };
            } else {
              return { name_space, name: nameWithoutDots, domain };
            }
          }
        input_transforms:
          email:
            expr: flow_input.email
            type: javascript
        language: deno
        lock: ''
        type: rawscript
      id: a
      input_transforms: {}
    - summary: Scrape Web
      value:
        content: |
          from bs4 import BeautifulSoup
          import requests
          from lxml.html import html5parser
          import html5lib


          def main(name: str, domain: str, name_space: str):
              def search(query):
                  url = "https://www.google.com/search?q={}".format(query)
                  r = requests.get(url)
                  data = r.text
                  soup = BeautifulSoup(data, "lxml")
                  titles = soup.find_all("h3")
                  res = []
                  for title in titles[:2]:
                      h = html5parser.fromstring(str(title)).getchildren()[0].text
                      res.append(h)
                  return res

              infos = [name, domain]
              query = "+".join(map(lambda x: x.replace(" ", "+"), infos))
              try:
                  res1 = search(query)
              except:
                  res1 = []

              infos = [name_space, domain]
              query = "+".join(map(lambda x: x.replace(" ", "+"), infos))
              try:
                  res2 = search(query)
              except:
                  res2 = []

              return res1, res2
        input_transforms:
          name:
            expr: results.a.name
            type: javascript
          domain:
            expr: results.a.domain
            type: javascript
          name_space:
            expr: results.a.name_space
            type: javascript
        language: python3
        lock: |-
          beautifulsoup4==4.12.0
          bs4==0.0.1
          certifi==2022.12.7
          charset-normalizer==3.1.0
          html5lib==1.1
          idna==3.4
          lxml==4.9.2
          requests==2.28.2
          six==1.16.0
          soupsieve==2.4
          urllib3==1.26.15
          webencodings==0.5.1
        type: rawscript
      id: c
      input_transforms: {}
    - summary: Removes empty and duplicates
      value:
        content: >-
          // import * as wmill from
          "https://deno.land/x/windmill@v1.83.1/mod.ts"


          export async function main(r1?: string, r2?: string, r3?: string, r4?:
          string) {
            // Assign empty strings to undefined inputs
            const inputs = [r1, r2, r3, r4].map((input) => input ?? "");
            
            const results = inputs.filter((result, index, array) => {
              // Remove empty values
              if (result.trim() === "") {
                return false;
              }
              // Remove duplicates
              return array.indexOf(result) === index;
            });
            
            return results;
          }
        input_transforms:
          r1:
            expr: 'results.c[0][0]'
            type: javascript
          r2:
            expr: 'results.c[0][1]'
            type: javascript
          r3:
            expr: 'results.c[1][0]'
            type: javascript
          r4:
            expr: 'results.c[1][1]'
            type: javascript
        language: deno
        lock: ''
        type: rawscript
      id: ak
      input_transforms: {}
    - summary: ''
      value:
        branches:
          - summary: ''
            expr: results.c.some((x)=>x!="")
            modules:
              - value:
                  iterator:
                    expr: results.ak
                    type: javascript
                  modules:
                    - summary: Open AI to tell if relevant result
                      value:
                        input_transforms:
                          auth:
                            expr: 'flow_input["Open AI"]'
                            type: javascript
                          best_of:
                            value: null
                            type: static
                          echo:
                            value: false
                            type: static
                          frequency_penalty:
                            value: null
                            type: static
                          logit_bias:
                            value: null
                            type: static
                          logprobs:
                            value: null
                            type: static
                          max_tokens:
                            value: 300
                            type: static
                          model:
                            value: text-davinci-003
                            type: static
                          n:
                            value: 1
                            type: static
                          presence_penalty:
                            value: null
                            type: static
                          prompt:
                            expr: >-
                              "Here is a tagline of a business profile: " +
                              flow_input.iter.value + ". If it somehow matches
                              the email " + flow_input.email + ", just say
                              'Match', otherwise say 'Doesn't match'."
                            type: javascript
                          stop:
                            value: ''
                            type: static
                          stream:
                            value: false
                            type: static
                          suffix:
                            value: ''
                            type: static
                          temperature:
                            value: 0
                            type: static
                          top_p:
                            value: null
                            type: static
                        path: hub/687/openai/create_completion
                        type: script
                      id: ae
                      input_transforms: {}
                    - summary: ''
                      value:
                        branches:
                          - summary: Match
                            expr: 'results.ae.choices[0].text.trim() === ''Match'''
                            modules:
                              - summary: Kill Professional Websites mentions
                                value:
                                  content: >-
                                    // import * as wmill from
                                    "https://deno.land/x/windmill@v1.82.0/mod.ts"


                                    const websites = ["Indeed", "Glassdoor",
                                    "AngelList", "Hired", "Monster",
                                    "CareerBuilder", "SimplyHired", "Dice",
                                    "Upwork", "BEAMSTART"];


                                    export async function main(search_result:
                                    string) {
                                      for (let website of websites) {
                                        if (search_result.includes(website)) {
                                          search_result = search_result.replace(website, "");
                                        }
                                      }
                                      return search_result;
                                    }
                                  input_transforms:
                                    search_result:
                                      expr: flow_input.iter.value
                                      type: javascript
                                  language: deno
                                  type: rawscript
                                id: ad
                                input_transforms: {}
                              - summary: Return matching result
                                value:
                                  content: >
                                    // import * as wmill from
                                    "https://deno.land/x/windmill@v1.82.0/mod.ts"


                                    export async function main(x: string) {
                                      return x
                                    }
                                  input_transforms:
                                    x:
                                      expr: results.ad
                                      type: javascript
                                  language: deno
                                  type: rawscript
                                id: ag
                                input_transforms: {}
                        default:
                          - summary: Does not match -> gives empty value
                            value:
                              content: >
                                // import * as wmill from
                                "https://deno.land/x/windmill@v1.82.0/mod.ts"


                                export async function main(x: string) {
                                  return x
                                }
                              input_transforms:
                                x:
                                  value: ''
                                  type: static
                              language: deno
                              type: rawscript
                            id: ah
                            input_transforms: {}
                        type: branchone
                      id: af
                      input_transforms: {}
                  parallel: false
                  skip_failures: true
                  type: forloopflow
                id: ac
                input_transforms: {}
              - summary: ''
                value:
                  branches:
                    - summary: ''
                      expr: >-
                        [results.ac[0],results.ac[1],results.ac[2]].some((x)=>x!="")
                      modules:
                        - summary: Open AI to make sense of web info
                          value:
                            input_transforms:
                              auth:
                                expr: 'flow_input["Open AI"]'
                                type: javascript
                              best_of:
                                value: null
                                type: static
                              echo:
                                value: false
                                type: static
                              frequency_penalty:
                                value: null
                                type: static
                              logit_bias:
                                value: null
                                type: static
                              logprobs:
                                value: null
                                type: static
                              max_tokens:
                                value: 350
                                type: static
                              model:
                                value: text-davinci-003
                                type: static
                              n:
                                value: 1
                                type: static
                              presence_penalty:
                                value: null
                                type: static
                              prompt:
                                expr: >-
                                  "Give with the exact format 'Number. Category:
                                  Result + jump line' the 1. First Name, 2. Last
                                  Name, 3. Profession, 4. Company and 5. What
                                  the Company Does of: email = " +
                                  flow_input.email + ". Some infos: " +
                                  results.ac[0] + ". " + results.ac[1] + ". " +
                                  results.ac[2] + ". " + results.ac[3] + ". Say
                                  'n/a' if not sure. Do not make up names but
                                  you can guess where to split first name and
                                  last name from email (but do not add just a
                                  letter as a name). You can take more risk for
                                  What the Company Does"
                                type: javascript
                              stop:
                                value: ''
                                type: static
                              stream:
                                value: false
                                type: static
                              suffix:
                                value: ''
                                type: static
                              temperature:
                                value: 0
                                type: static
                              top_p:
                                value: null
                                type: static
                            path: hub/687/openai/create_completion
                            type: script
                          id: aa
                          input_transforms: {}
                        - summary: Parser
                          value:
                            content: |
                              export async function main(completion: string) {
                                const regex = /1. First Name: (.+)\n2. Last Name: (.+)\n3. Profession: (.+)\n4. Company: (.+)\n5. What the Company Does: (.+)/;
                                const matches = completion.match(regex);
                                if (!matches) {
                                  throw new Error("Invalid completion string");
                                }

                                const [, value1, value2, value3, value4, value5] = matches;
                                const first_name = value1.trim();
                                const last_name = value2.trim();
                                const profession = value3.trim();
                                const company = value4.trim();
                                const what_company_does = value5.trim();

                                return { first_name, last_name, profession, company, what_company_does };
                              }
                            input_transforms:
                              completion:
                                expr: 'results.aa.choices[0].text'
                                type: javascript
                            language: deno
                            type: rawscript
                          id: y
                          input_transforms: {}
                        - summary: Create Single Record (Airtable)
                          value:
                            content: >-
                              import * as wmill from
                              "https://deno.land/x/windmill@v1.70.1/mod.ts";

                              import { Airtable } from
                              "https://deno.land/x/airtable/mod.ts";


                              export async function main(at_con:
                              wmill.Resource<"airtable">, at_table:
                              wmill.Resource<"airtable_table">, first_name:
                              string, last_name: string, email: string, company:
                              string, role: string, what_company_does: string,
                              automatic: boolean = true) {

                                  const airtable = new Airtable({...at_con, ...at_table});
                                  
                                  const new_record = {
                                      "First name": first_name,
                                      "Last name": last_name,
                                      "Email": email,
                                      "Company": company,
                                      "Role": role,
                                      "What company does": what_company_does,
                                      "Generated automatically": automatic
                                  };

                                  const createOne = await airtable.create(new_record);

                                  return { message: "Created record in table"}
                              }
                            input_transforms:
                              at_con:
                                expr: 'flow_input["Airtable Account"]'
                                type: javascript
                              at_table:
                                expr: 'flow_input["Airtable Table"]'
                                type: javascript
                              automatic:
                                value: true
                                type: static
                              company:
                                expr: results.y.company
                                type: javascript
                              email:
                                expr: flow_input.email
                                type: javascript
                              first_name:
                                expr: results.y.first_name
                                type: javascript
                              last_name:
                                expr: results.y.last_name
                                type: javascript
                              role:
                                expr: results.y.profession
                                type: javascript
                              what_company_does:
                                expr: results.y.what_company_does
                                type: javascript
                            language: deno
                            path: hub/714/airtable/create_single_record
                            type: rawscript
                          id: v
                          input_transforms: {}
                  default:
                    - summary: Create Single Record (Airtable)
                      value:
                        content: >-
                          import * as wmill from
                          "https://deno.land/x/windmill@v1.70.1/mod.ts";

                          import { Airtable } from
                          "https://deno.land/x/airtable/mod.ts";


                          export async function main(at_con:
                          wmill.Resource<"airtable">, at_table:
                          wmill.Resource<"airtable_table">, first_name: string =
                          "n/a", last_name: string = "n/a", email: string,
                          company: string = "n/a", role: string = "n/a",
                          what_company_does: string = "n/a", automatic: boolean
                          = true) {

                              const airtable = new Airtable({...at_con, ...at_table});
                              
                              const new_record = {
                                  "First name": first_name,
                                  "Last name": last_name,
                                  "Email": email,
                                  "Company": company,
                                  "Role": role,
                                  "What company does": what_company_does,
                                  "Generated automatically": automatic
                              };

                              const createOne = await airtable.create(new_record);

                              return { message: "Created record in table"}
                          }
                        input_transforms:
                          at_con:
                            expr: 'flow_input["Airtable Account"]'
                            type: javascript
                          at_table:
                            expr: 'flow_input["Airtable Table"]'
                            type: javascript
                          automatic:
                            value: true
                            type: static
                          company:
                            value: n/a
                            type: static
                          email:
                            expr: flow_input.email
                            type: javascript
                          first_name:
                            value: n/a
                            type: static
                          last_name:
                            value: n/a
                            type: static
                          role:
                            value: n/a
                            type: static
                          what_company_does:
                            value: n/a
                            type: static
                        language: deno
                        type: rawscript
                      id: z
                      input_transforms: {}
                  type: branchone
                id: aj
                input_transforms: {}
        default:
          - summary: Create Single Record (Airtable)
            value:
              content: >-
                import * as wmill from
                "https://deno.land/x/windmill@v1.70.1/mod.ts";

                import { Airtable } from "https://deno.land/x/airtable/mod.ts";


                export async function main(at_con: wmill.Resource<"airtable">,
                at_table: wmill.Resource<"airtable_table">, first_name: string =
                "n/a", last_name: string = "n/a", email: string, company: string
                = "n/a", role: string = "n/a", what_company_does: string =
                "n/a", automatic: boolean = true) {

                    const airtable = new Airtable({...at_con, ...at_table});
                    
                    const new_record = {
                        "First name": first_name,
                        "Last name": last_name,
                        "Email": email,
                        "Company": company,
                        "Role": role,
                        "What company does": what_company_does,
                        "Generated automatically": automatic
                    };

                    const createOne = await airtable.create(new_record);

                    return { message: "Created record in table"}
                }
              input_transforms:
                at_con:
                  expr: 'flow_input["Airtable Account"]'
                  type: javascript
                at_table:
                  expr: 'flow_input["Airtable Table"]'
                  type: javascript
                automatic:
                  value: true
                  type: static
                company:
                  value: n/a
                  type: static
                email:
                  expr: flow_input.email
                  type: javascript
                first_name:
                  value: n/a
                  type: static
                last_name:
                  value: n/a
                  type: static
                role:
                  value: n/a
                  type: static
                what_company_does:
                  value: n/a
                  type: static
              language: deno
              type: rawscript
            id: an
            input_transforms: {}
        type: branchone
      id: al
      input_transforms: {}
schema:
  $schema: 'https://json-schema.org/draft/2020-12/schema'
  properties:
    Airtable Account:
      description: ''
      default: ''
      format: resource-airtable
      type: object
    Airtable Table:
      description: ''
      default: ''
      format: resource-airtable_table
      type: object
    email:
      description: ''
      default: ''
      format: ''
      type: string
    Open AI:
      description: ''
      default: ''
      format: resource-openai
      type: object
  required: []
  type: object
