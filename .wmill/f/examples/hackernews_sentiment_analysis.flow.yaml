summary: >-
  Whenever an HackerNews message contains a mention, publish it to Slack with
  sentiment analysed
description: >-
  We watch all new items on HackerNews and filter those that match one of the
  parametrized mention.

   For each of them, we attach sentiment analysis through NLTK and then publish it to slack.
value:
  modules:
    - summary: Watch for new message with mentions on HackerNews
      value:
        content: |
          import * as wmill from "https://deno.land/x/windmill@v1.25.0/mod.ts";

          const MAX_LOOKBACK = 100;

          export async function main(mentions: string[]) {
            console.log(wmill.getInternalStatePath());
            let lastState = await wmill.getInternalState();
            console.log(`lastState: ${lastState}`);

            let maxItem = await getMaxItem();
            console.log(`maxItem: ${maxItem}`);

            if (!lastState) {
              console.log(
                `First run of trigger, looking back to MAX_LOOKBACK (100) elements`,
              );
              lastState = maxItem - MAX_LOOKBACK;
            }

            maxItem = Math.min(maxItem, lastState + MAX_LOOKBACK);

            const items = [];
            for (let i = lastState; i < maxItem; i++) {
              console.log(`fetching id: ${i}`);
              const item = await getItem(i);
              if (mentions.find((mention) => item.text?.includes(mention))) {
                items.push(item);
              }
            }
            await wmill.setInternalState(maxItem);

            return items;
          }

          export async function getMaxItem() {
            const res = await fetch("https://hacker-news.firebaseio.com/v0/maxitem.json");
            return Number(await res.text());
          }

          export async function getItem(id: number) {
            const res = await fetch(
              `https://hacker-news.firebaseio.com/v0/item/${id}.json`,
            );
            return res.json();
          }
        input_transforms:
          mentions:
            expr: previous_result.mentions
            type: javascript
        language: deno
        lock: ''
        type: rawscript
      id: a
      input_transforms: {}
      stop_after_if:
        expr: result.length == 0
        skip_if_stopped: true
    - value:
        iterator:
          expr: result
          type: javascript
        modules:
          - summary: Analyse sentiment with nltk
            value:
              content: |
                from nltk.sentiment import SentimentIntensityAnalyzer

                def main(text: str = "Wow, NLTK is really powerful!"):
                    return SentimentIntensityAnalyzer().polarity_scores(text)
              input_transforms:
                text:
                  expr: '`${flow_input.iter.value.text}`'
                  type: javascript
              language: python3
              type: rawscript
            id: c
            input_transforms: {}
          - summary: Send message to slack
            value:
              input_transforms:
                channel:
                  expr: '`${flow_input.channel}`'
                  type: javascript
                slack:
                  expr: flow_input.slack
                  type: javascript
                text:
                  expr: >-
                    `${flow_input.iter.value.id} by ${flow_input.iter.value.by}:
                    \n ${flow_input.iter.value.text}:

                    ${JSON.stringify(previous_result)}`
                  type: javascript
              path: hub/111/slack/send_message_to_channel
              type: script
            id: d
            input_transforms: {}
        parallel: false
        skip_failures: true
        type: forloopflow
      id: b
      input_transforms: {}
schema:
  $schema: 'https://json-schema.org/draft/2020-12/schema'
  properties:
    channel:
      description: slack channel
      default: demo
      format: ''
      type: string
    mentions:
      description: The list of mentions to watch for
      default:
        - windmill
        - unicorn
      format: ''
      items:
        type: string
      type: array
    slack:
      description: OAuth slack credentials
      format: resource-slack
      type: object
  required:
    - mentions
    - channel
  type: object
