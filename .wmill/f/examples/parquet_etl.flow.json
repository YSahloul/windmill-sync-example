{
  "value": {
    "modules": [
      {
        "id": "a",
        "value": {
          "lock": "cramjam==2.6.2\nfastparquet==2023.2.0\nfsspec==2023.3.0\nnumpy==1.24.2\npackaging==23.0\npandas==1.5.3\npython-dateutil==2.8.2\npytz==2022.7.1\nsix==1.16.0",
          "type": "rawscript",
          "content": "import pandas as pd\nimport pathlib\nimport fastparquet\n\ndef main():\n  nytimes = pd.read_csv(\n      'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv',\n      index_col=['date'], parse_dates=['date']).asfreq(freq='D')\n\n  # Transform: add new columns with useful transformations\n  nytimes['new_cases'] = nytimes['cases'].diff()\n  nytimes['new_cases_ma7'] = nytimes['new_cases'].rolling(7).mean()\n\n  anomalous_dates = ['2020-09-21', '2020-11-26', '2020-12-11', '2020-12-25']\n  nytimes['anomaly'] = False\n  nytimes.loc[anomalous_dates, 'anomaly'] = True\n\n  nytimes_path = pathlib.Path('./shared/nytimes')\n  nytimes_path.mkdir(parents=True, exist_ok=True)\n  path = nytimes_path / 'us.parquet'\n  nytimes.to_parquet(path)\n  return path",
          "language": "python3",
          "input_transforms": {}
        },
        "summary": "Get the covid-19 data and store it as parquet",
        "input_transforms": {}
      },
      {
        "id": "b",
        "value": {
          "lock": "contourpy==1.0.7\ncramjam==2.6.2\ncycler==0.11.0\nfastparquet==2023.2.0\nfonttools==4.39.0\nfsspec==2023.3.0\nkiwisolver==1.4.4\nmatplotlib==3.7.1\nnumpy==1.24.2\npackaging==23.0\npandas==1.5.3\npillow==9.4.0\npyparsing==3.0.9\npython-dateutil==2.8.2\npytz==2022.7.1\nsix==1.16.0",
          "type": "rawscript",
          "content": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport fastparquet\nimport base64\n\ndef main(path: str):\n  fig, ax = plt.subplots(figsize=(15, 6), dpi=200)\n\n  # Colors\n  normal_color = '#cf1111'\n  anomaly_color = '#ffe4ad'\n\n  # Subset our data for plotting, and separate into normal and anomalous\n  to_plot = pd.read_parquet(\n      path,\n      columns=['new_cases', 'new_cases_ma7', 'anomaly']).loc['2020-03':]\n  normal = to_plot.query('not anomaly')\n  anomalous = to_plot.query('anomaly')\n\n  # Add new cases rolling average and annotation\n  to_plot['new_cases_ma7'].plot(color=normal_color, ax=ax)\n\n  label_date = '2020-07-26'\n  ax.annotate('7-day\\naverage',\n              xy=(label_date, to_plot['new_cases_ma7'].loc[label_date]),\n              xytext=(0, 16), textcoords='offset points',\n              horizontalalignment='center',\n              arrowprops=dict(arrowstyle=\"-\"),\n              color=normal_color)\n\n  # Add new cases bar plot and annotation\n  ax.bar(normal.index, normal['new_cases'], width=0.6, color=normal_color,\n        alpha=0.3)\n  ax.bar(anomalous.index, anomalous['new_cases'], width=0.6, color=anomaly_color)\n\n  label_date = normal.index[normal.new_cases.argmax()]\n  ax.annotate('New\\ncases',\n              xy=(label_date, to_plot['new_cases'].loc[label_date]),\n              xytext=(-20, 0), textcoords='offset points',\n              horizontalalignment='right',\n              verticalalignment='center',\n              arrowprops=dict(arrowstyle=\"-\"),\n              color=normal_color)\n\n  # Add and annotate horizontal grid lines\n  ax.hlines(100_000, to_plot.index[0], to_plot.index[-1], color='lightgray',\n            linestyle='--', linewidth=1)\n  ax.hlines(200_000, to_plot.index[0], to_plot.index[-1], color='lightgray',\n            linestyle='--', linewidth=1)\n\n  ax.annotate('200,000 cases',\n              xy=('2020-03-01', 200_000),\n              xytext=(0, 5), textcoords='offset points',\n              fontsize='large', color='gray')\n  ax.annotate('100,000',\n              xy=('2020-03-01', 100_000),\n              xytext=(0, 5), textcoords='offset points',\n              fontsize='large', color='gray')\n\n  # Styling\n  [ax.spines[spine].set_visible(False)\n  for spine in ['top', 'right', 'bottom', 'left']]\n  ax.yaxis.set_ticks([])\n  ax.minorticks_off()\n  ax.set_xlabel('');\n  plt.savefig('out.png')\n  with open('out.png', \"rb\") as image_file:\n    encoded_string = base64.b64encode(image_file.read()).decode('ascii')\n\n  return {\"png\": encoded_string}\n",
          "language": "python3",
          "input_transforms": {
            "path": {
              "expr": "results.a",
              "type": "javascript"
            }
          }
        },
        "summary": "Do analytics and build plot",
        "input_transforms": {}
      }
    ],
    "same_worker": true
  },
  "schema": {
    "type": "object",
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "required": [],
    "properties": {}
  },
  "summary": "Small ETL using same_worker to share parquet across steps and do data analytics",
  "description": "This flow uses the same_worker setting to share data in the '/shared' folder. \nThe flow consists in getting covid-19 data from a csv, store it in parquet and then build a plot out of it"
}